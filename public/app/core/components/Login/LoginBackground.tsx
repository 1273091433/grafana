import React, { Component } from 'react';

const xCount = 30;
const yCount = 50;

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive
}

export default class LoginBackground extends Component<any, any> {
  cancelInterval: any;
  matrix: any;

  constructor(props) {
    super(props);

    this.state = {
      flipIndex: null,
    };

    // this.matrix = [];
    // for (let y = 0; y < yCount; y++) {
    //   let row = [];
    //   this.matrix.push(row);
    //   for (let x = 0; x < xCount; x++) {
    //     row.push(0);
    //   }
    // }

    this.matrix = [
      [0, 0, 0, 0, 0, 1, 2, 3, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 2, 1],
      [0, 3, 0, 0, 0, 1, 0, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 3, 0],
      [0, 3, 0, 0, 0, 2, 1, 3, 4, 0, 1, 0, 0, 1, 4, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0],
      [0, 3, 0, 1, 2, 3, 0, 1, 2, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 1, 3, 2, 0],
      [0, 2, 1, 0, 0, 2, 0, 2, 1, 0, 0, 0, 1, 3, 2, 1, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 1, 2, 3, 0],
      [2, 3, 2, 0, 0, 2, 4, 3, 0, 0, 2, 0, 0, 2, 0, 1, 2, 0, 1, 1, 2, 0, 0, 0, 0, 0, 1, 2, 1, 1],
      [4, 6, 3, 1, 0, 0, 2, 2, 0, 1, 2, 2, 2, 3, 2, 3, 2, 2, 2, 4, 3, 2, 0, 1, 1, 0, 2, 4, 3, 0],
      [3, 4, 3, 2, 2, 3, 3, 1, 2, 4, 4, 0, 0, 3, 2, 4, 6, 4, 3, 3, 2, 2, 0, 2, 3, 0, 0, 0, 3, 0],
      [3, 4, 3, 3, 3, 2, 3, 1, 2, 4, 2, 0, 2, 2, 0, 2, 3, 2, 2, 4, 4, 4, 3, 5, 3, 0, 1, 4, 5, 2],
      [2, 5, 2, 5, 6, 3, 3, 1, 0, 2, 1, 0, 3, 0, 6, 6, 4, 8, 3, 4, 4, 3, 0, 3, 2, 0, 2, 4, 2, 3],
      [3, 4, 2, 1, 3, 8, 3, 3, 1, 2, 4, 5, 4, 3, 3, 1, 6, 4, 4, 0, 4, 2, 0, 3, 1, 1, 3, 2, 3, 3],
      [7, 6, 4, 1, 1, 6, 7, 3, 2, 2, 2, 2, 3, 3, 3, 4, 7, 5, 2, 0, 8, 3, 2, 3, 0, 0, 3, 6, 7, 3],
      [5, 4, 4, 4, 5, 3, 5, 6, 6, 7, 6, 5, 4, 4, 3, 6, 3, 4, 3, 5, 5, 2, 0, 2, 1, 3, 4, 5, 2, 2],
      [4, 5, 4, 3, 6, 5, 3, 4, 3, 2, 5, 2, 3, 6, 5, 3, 4, 4, 5, 6, 2, 0, 1, 1, 0, 0, 3, 2, 1, 1],
      [3, 4, 3, 5, 3, 4, 5, 5, 3, 1, 4, 3, 4, 4, 3, 5, 7, 7, 6, 6, 5, 1, 3, 1, 1, 2, 1, 2, 1, 1],
      [4, 7, 4, 6, 6, 3, 3, 6, 4, 2, 3, 1, 3, 2, 3, 3, 4, 4, 4, 6, 3, 6, 7, 3, 4, 4, 3, 3, 3, 2],
      [8, 9, 5, 5, 4, 3, 3, 3, 1, 0, 2, 3, 5, 7, 5, 3, 4, 5, 5, 6, 3, 7, 7, 5, 2, 4, 4, 10, 5, 3],
      [8, 5, 9, 5, 6, 6, 4, 3, 2, 4, 9, 4, 3, 7, 5, 6, 5, 3, 0, 4, 6, 4, 4, 3, 4, 6, 5, 4, 3, 5],
      [6, 4, 5, 7, 7, 4, 8, 4, 1, 3, 4, 4, 2, 2, 4, 3, 3, 3, 3, 5, 5, 5, 5, 5, 4, 3, 3, 2, 3, 6],
      [6, 9, 5, 5, 5, 5, 7, 7, 7, 5, 4, 6, 6, 3, 2, 4, 1, 3, 7, 3, 3, 4, 9, 4, 2, 3, 6, 4, 5, 3],
      [9, 8, 14, 7, 3, 5, 4, 4, 2, 7, 5, 3, 4, 5, 5, 3, 1, 4, 4, 4, 8, 7, 3, 6, 4, 7, 4, 3, 6, 7],
      [9, 5, 6, 11, 7, 7, 7, 5, 2, 1, 4, 3, 3, 1, 3, 3, 4, 4, 5, 6, 4, 4, 1, 6, 6, 5, 6, 5, 3, 7],
      [6, 4, 6, 7, 8, 5, 3, 6, 3, 6, 6, 6, 3, 1, 3, 1, 2, 5, 2, 3, 3, 5, 8, 5, 6, 5, 5, 4, 5, 6],
      [12, 11, 5, 5, 4, 4, 3, 11, 5, 3, 5, 5, 4, 4, 5, 3, 4, 2, 3, 4, 5, 3, 2, 5, 8, 5, 4, 5, 4, 8],
      [11, 9, 8, 3, 6, 5, 4, 4, 3, 3, 4, 5, 4, 4, 4, 5, 3, 4, 3, 4, 4, 5, 2, 5, 6, 1, 4, 4, 4, 10],
      [15, 12, 9, 9, 4, 5, 3, 4, 3, 8, 5, 3, 2, 5, 4, 6, 3, 5, 4, 3, 3, 5, 6, 5, 5, 0, 4, 7, 7, 11],
      [12, 10, 9, 9, 5, 7, 4, 5, 7, 5, 5, 7, 6, 3, 1, 5, 4, 3, 3, 4, 4, 3, 3, 3, 8, 5, 4, 5, 7, 9],
      [10, 8, 10, 8, 9, 5, 4, 3, 4, 3, 5, 4, 5, 3, 3, 1, 4, 4, 5, 3, 3, 6, 4, 5, 4, 4, 4, 3, 4, 7],
      [12, 10, 14, 13, 10, 7, 9, 5, 7, 5, 3, 4, 5, 5, 4, 4, 6, 5, 3, 6, 4, 7, 7, 7, 4, 4, 8, 9, 7, 11],
      [8, 11, 8, 11, 11, 11, 9, 10, 8, 4, 4, 8, 4, 2, 4, 2, 8, 4, 4, 8, 6, 6, 6, 3, 4, 9, 7, 7, 7, 10],
      [8, 9, 12, 9, 9, 10, 11, 6, 5, 6, 4, 4, 1, 3, 3, 4, 8, 3, 3, 8, 5, 9, 10, 1, 4, 9, 9, 7, 11, 8],
      [10, 6, 8, 10, 7, 7, 14, 12, 9, 6, 5, 3, 5, 4, 7, 7, 5, 6, 5, 6, 3, 8, 8, 1, 4, 7, 12, 7, 12, 11],
      [5, 5, 6, 10, 9, 6, 6, 9, 7, 7, 8, 6, 5, 3, 7, 3, 5, 4, 9, 9, 7, 6, 4, 3, 8, 8, 7, 9, 9, 12],
      [5, 7, 9, 5, 6, 7, 7, 13, 12, 7, 8, 5, 4, 5, 6, 5, 5, 4, 3, 3, 5, 7, 6, 7, 8, 7, 11, 11, 7, 10],
      [4, 8, 6, 7, 8, 9, 8, 11, 9, 8, 5, 7, 6, 7, 4, 6, 3, 5, 4, 5, 6, 6, 4, 10, 5, 9, 8, 6, 5, 6],
      [3, 5, 4, 7, 9, 7, 6, 8, 11, 12, 9, 9, 5, 3, 3, 4, 5, 3, 3, 4, 6, 4, 7, 10, 12, 6, 5, 8, 10, 7],
      [2, 5, 5, 6, 7, 7, 5, 6, 9, 11, 6, 8, 7, 3, 6, 3, 7, 3, 6, 4, 5, 2, 6, 2, 1, 7, 7, 4, 7, 6],
      [3, 9, 10, 7, 8, 9, 5, 2, 6, 8, 10, 11, 11, 5, 10, 8, 5, 7, 5, 5, 7, 7, 11, 7, 6, 12, 3, 5, 6, 4],
      [3, 5, 6, 3, 4, 6, 3, 4, 4, 6, 12, 11, 10, 10, 7, 4, 4, 7, 8, 11, 10, 7, 7, 8, 8, 10, 3, 3, 8, 6],
      [0, 3, 6, 5, 5, 3, 3, 4, 2, 4, 6, 7, 7, 9, 9, 6, 7, 8, 12, 7, 9, 9, 8, 10, 7, 3, 5, 5, 4, 7],
      [2, 3, 3, 3, 5, 4, 5, 5, 3, 5, 4, 4, 9, 9, 9, 9, 7, 10, 12, 8, 6, 6, 6, 4, 6, 4, 4, 1, 2, 5],
      [2, 2, 4, 8, 4, 3, 1, 4, 1, 3, 6, 8, 6, 7, 8, 7, 11, 9, 5, 6, 7, 6, 8, 6, 2, 3, 1, 1, 3, 8],
      [3, 2, 4, 4, 5, 6, 5, 5, 2, 3, 4, 3, 5, 3, 11, 6, 8, 6, 7, 8, 6, 5, 1, 0, 2, 6, 3, 0, 3, 2],
      [1, 2, 4, 1, 3, 3, 8, 7, 5, 5, 3, 3, 3, 7, 8, 9, 7, 6, 5, 7, 4, 6, 4, 0, 4, 4, 1, 2, 7, 3],
      [3, 0, 2, 4, 4, 2, 3, 1, 3, 7, 7, 7, 3, 3, 2, 3, 4, 4, 4, 7, 1, 4, 5, 5, 3, 2, 4, 1, 4, 2],
      [3, 2, 4, 3, 2, 5, 5, 1, 0, 3, 5, 5, 4, 4, 4, 2, 3, 4, 5, 8, 4, 7, 5, 6, 3, 3, 2, 0, 2, 2],
      [0, 5, 3, 1, 7, 6, 3, 3, 5, 5, 3, 2, 3, 3, 3, 5, 1, 0, 6, 2, 4, 5, 3, 3, 4, 2, 4, 2, 3, 4],
      [0, 3, 2, 3, 3, 2, 3, 3, 2, 0, 1, 5, 3, 4, 5, 6, 5, 1, 1, 2, 2, 3, 1, 5, 2, 0, 0, 0, 1, 0],
      [0, 0, 2, 2, 0, 0, 1, 3, 3, 2, 3, 4, 2, 4, 7, 3, 1, 0, 1, 6, 4, 4, 3, 2, 2, 2, 1, 0, 0, 1],
      [0, 3, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 4, 3, 2, 2, 4, 2, 3, 4, 2, 3, 0, 1, 1, 5, 3],
    ];

    this.flipElements = this.flipElements.bind(this);
  }

  flipElements() {
    const elementIndexToFlip = getRandomInt(0, xCount * yCount - 1);
    this.setState(prevState => {
      return {
        ...prevState,
        flipIndex: elementIndexToFlip,
      };
    });
  }

  componentWillMount() {
    this.cancelInterval = setInterval(this.flipElements, 2000);
  }

  componentWillUnmount() {
    clearInterval(this.cancelInterval);
  }

  onHover = (x, y, event) => {
    let current = this.matrix[x][y];
    if (current === 0) {
      this.matrix[x][y] += 3;
      if (x > 1) {
        this.matrix[x - 1][y] += 2;
      }

      if (x > 2) {
        this.matrix[x - 2][y] += 1;
      }

      if (x + 1 < xCount) {
        this.matrix[x + 1][y] += 2;
      }

      if (x + 2 < xCount) {
        this.matrix[x + 2][y] += 1;
      }

      if (y > 1) {
        this.matrix[x][y - 1] += 2;
      }

      if (y > 2) {
        this.matrix[x][y - 2] += 1;
      }

      if (y + 1 > yCount) {
        this.matrix[x][y + 1] += 2;
      }

      if (y + 2 > yCount) {
        this.matrix[x][y + 2] += 1;
      }
    } else {
      this.matrix[x][y] += event.shiftKey ? -1 : 1;
    }

    this.matrix[x][y] = Math.min(this.matrix[x][y], colors.length - 1);

    console.log(this.matrix);
    this.forceUpdate();
  };

  render() {
    console.log('re-render!', this.state.flipIndex);

    return (
      <div className="login-bg">
        {this.matrix.map((row, y) => {
          return (
            <div className="login-bg__row" key={y}>
              {row.map((colorIndex, x) => {
                return (
                  <div
                    className={`login-bg__item ${this.state.flipIndex === (y * xCount + x) ? 'login-bg-flip' : ''}`}
                    key={x}
                    style={{ background: colors[colorIndex] }}
                    // onMouseOver={event => this.onHover(y, x, event)}
                  />
                );
              })}
            </div>
          );
        })}
      </div>
    );
  }
}

const colors = [
  '#000f20',
  '#001835',
  '#011126',
  '#011735',
  '#001a3a',
  '#021e3f',
  '#002045',
  '#01264f',
  '#002d59',
  '#013364',
  '#003b72',
  '#014b8d',
  '#016abd',
  '#0168bc',
  '#00aedb',
  '#00d3e2',
  '#00d9e2',
  '#05dce2',
];
